============================= TESTS DONE ===============================
\\\\\\\\\\\\\\\\\\\ pipes //////////////////
echo "Hello" | grep "Hello"
ls -l minishell_files | grep objs
ls -l minishell_files | grep objs | wc -w
ls -l minishell_files | grep objs | wc -wc

\\\\\\\\\\\\\\\\\\\\ redirect inputs //////////////////
wc -l < test.txt
sort < test.txt
sort < test.txt | wc -l
sort < test.txt | grep z
sort < test.txt | grep z | wc -l

\\\\\\\\\\\\\\\\\\\\ redirect outputs //////////////////

ls -l > output.txt

wc -l < test.txt > output.txt
sort < test.txt > output.txt
sort < test.txt | wc -l > output.txt
sort < test.txt | grep z > output.txt
sort < test.txt | grep z | wc -l > output.txt


\\\\\\\\\\\\\\\\\\\\\\\\\ << here-doc //////////////////
cat << EOF
cat << EOF > output.txt
cat << EOF | grep jonona > output.txt

cat << EOF >> output.txt
cat << EOF | grep jonona >> output.txt

cat <<
cat << ""
<< EOF


TEST AND / OR

(ls -a | grep mini) || (ls -l | grep mini)
(ls -a | grep mini) && (ls -l | grep mini)

(ls -a | grep mini > output.txt) || (ls -l | grep mini > output.txt)
(ls -a | grep mini > output.txt) && (ls -l | grep mini >> output.txt)

ls -a | grep mini > output.txt || ls -l | grep mini > output.txt
ls -a | grep mini > output.txt && ls -l | grep mini >> output.txt

(ls -a | grep mini) > output.txt || (ls -l | grep mini) > output.txt
(ls -a | grep mini) > output.txt && (ls -l | grep mini) >> output.txt

(ls -a | grep mini | wc -l) > output.txt && (ls -l | grep w | wc -l) >> output.txt
(ls -a | grep mini | wc -l) > output.txt || (ls -l | grep w | wc -l) >> output.txt

< input.txt (cat | grep jnn) > output.txt && (ls -l | grep mini) >> output.txt

< input.txt cat | grep jnn > output.txt && (ls -l | grep mini) >> output.txt


(ls -a | grep mini && cat < input.txt) > output.txt
((ls -a| grep mini) || cat < input.txt) > output.txt
(ls -a && cat < input.txt) | grep .txt > output.txt
(ls -a && cat < input.txt) | grep .txt | (grep input | wc -l) > output.txt
(ls -a && cat < input.txt) | (grep .txt | (grep input | wc -l)) > output.txt
(ls| sort && cat < input.txt) && (((ls -a && cat < input.txt) | grep .txt) | (grep input | wc -l)) > output.txt
(ls| sort && cat < input.txt) >> output.txt >> output_2.txt && (((ls -a && cat < input.txt) | grep .txt) | (grep input | wc -l)) >> output.txt
(ls| sort && < input.txt cat ) >> output.txt >> output_2.txt && (((ls -a && cat < input.txt) | grep .txt) | (grep input | wc -l)) >> output.txt

(cat && grep sdfsdf) < input.txt
(cat | grep jnn) < input.txt

(ls -a && cat < input.txt) > output.txt > output2.txt

(lasdfs -aasdf || cat < input.txt) 2> error.log > output.tx
(echo $TEST && cat < input.txt) > output.txt

export TEST=123
(echo $TEST && cat < input.txt) > output.txt

(export TEST=456 && ls -a) > output.txt
echo $TEST  # Should still be unset or original value


(lsasd -a | grep minih) > output.txt || (ls -l | grep mini) > output.txt

==================================== TESTS DONE =======================================
** first check token_lst
** then handle in parser most probably (yep.......)

cat | cat | ls

cat *.txt
ls *.txt

ls [first char *]
ls [* last char]
ls [* only]
ls [* in the middle]
ls [*nonexistent ending] [*existant end] (probably * nonexistant ending is send as a single argument)

ls
ls [* ending of filr or directory] (if directory then print all files in the directory, however the subject says it shouldn't be handled)  [DO NOT HANDLE]


echo << EOF >> output.txt
echo "Hello, World!" > output.txt
echo << EOF > output.txt



cat sjdf*.txt$PATH


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ISUES ///////////////////////////
""
''











\\\\\\\\\\\\\\\\\ "strongly quoted" string ///////////////////

echo 'Today is $(date +%A)'
echo Today is $(date +%A)

echo 'It'\''s a test'
echo 'This costs $100!'
||||||||| NOT HANDLE ||||||||||||
echo 'Line 1
Line 2'  => not handle

Ansi-c quoting ===> https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
echo $'Line 1\nLine 2'
echo 'Line 1\nLine 2'
tabbed=$'item1\titem2'
echo "$tabbed"

echo 'I am \ $PATH' => a single quote may not appear inside

echo "asdj $nonexistentvar" =>

\\\\\\\\\\\\\\\\\ "weakly quoted" string //////////////////
echo "Today is $(date +%A)"
echo Today is $(date +%A)

name="Alice"
echo "Hello, $name"
echo 'Hello, $name'

echo "Sum: $((5 + 3))"

file="My Document.txt"
touch "$file"   # Creates one file: "My Document.txt"
touch $file     # Creates two files: "My" and "Document.txt" (if they don’t exist)

echo "*.txt"
echo *.txt


\\\\\\\\\\\\\\\\\ normal tests //////////////////
echo "Hello, World!"
ls
ls -l
ls -l minishell_files

||||||||||||||||||||||| DON'T KNOW HOW MINISHELL NEEDS TO HANDLE ||||||||||||||||||||||||


\\\\\\\\\\\\\\\\\\\\\\\\\\\\ Handle environment variables ////////////

MY_VAR="Hello, World"
echo $MY_VAR
echo "${MY_VAR}"

phrase="Hello   World"
echo $phrase  # Unquoted → Tokens after splitting: "Hello", "World"
echo "$phrase"  # Quoted → Token: "Hello   World" (preserves spaces)






NINE_NUM=9
TWELVE_NUM=12
echo $NINE_NUM
echo $TWELVE_NUM
echo $((NINE_NUM + TWELVE_NUM))

NINE_NUM=9
THIRTEEN=13a
echo $THIRTEEN
echo $((NINE_NUM + THIRTEEN)) // probably it is converted by shell itself



\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ERRORS ////////////
echo < nonexistent_file
echo 'Don't do this'  # Syntax error: The single quote in "Don't" closes the string early.



\\\\\\\\\\\\\\\\\\\\\\\\\\ echo ///////////////////////
echo "Hello $USER" > file.txt



echo "hello world"
....



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ cat ///////////////////////
cat file.txt
cat < file.txt -> behave the same

cat > file.txt -> behaves differently

echo "          $PATH"




echo           asdlfjas                   lsdjf
echo "         asdlfjas                   lsdjf"


< append cat



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ strerr ///////////////////////////////
echohello 2> error.txt = handling error output








\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BONUS //////////////////////////////
Basics of && and ||
&& (AND): Executes the command on the right only if the command on the left succeeds (returns an exit status of 0).
|| (OR): Executes the command on the right only if the command on the left fails (returns a non-zero exit status).

echo "Hello" && echo "World"


In Bash, a command’s success or failure is determined by its exit status:
0 means success.
Non-zero (e.g., 1, 2, etc.) means failure.


command1 && command2 || command3
(command1 || command2) && command3
command1 || (command2 && command3)
((command1 || command2) && command3) || command4


(ls file.txt && echo "File exists") || echo "File does not exist"

(ls dir1 || ls dir2) && echo "At least one directory exists"



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ WILDCARDS ////////////////////////
echo "Hello*"  # Matches files starting with "Hello"
ls *.c
ls*c
ls "*.c"
ls '*.c'
ls pa* | grep ms_to*


cat "jfjffj.txt""test_cases.txt"



seperators = blanck_space, |, redirections, AND, OR


		   >
        /     \
   output.txt   |
              /   \
          wc -w    |
                /     \
             grep sth  |
                      / \
                   cat   <
                        / \
                 input.txt  ε


           >
        /     \
   output.txt   |
              /   \
          wc -w    (
                /     \
              cmd    |
            /       / \
                 cat   <
                        / \
                 input.txt  ε



      is_cmd or redirection
         /            \
    exec cmd1		   is_cmd (pipe)
                /             \
           exec cmd2






ls
$? = 0 (SUCCESS)


grep "pattern" file.txt
status=$?
echo "Exit status was $status"

ls -a | fasdf
$? = 127

ls -a | ls -re
$? = 2

handle SHLVL environment (export). cannot go over 999!!!!

// function to simply seperate functions to executables
// name of the executable
// redirection struct (0 - no_redirection, 1 - input redirection, 2 - output redirection here-doc...)
// // name of the redirection file *str
// char **argv for the executable if any (always contains the name of the executable) 


// if it needs to pipe its output to another command then pipe it then which of the pipes
// if the result needs to be piped to another command
special function to handle pipes???




example:
echo 'Today is $(date +%A)' | grep "Today is"

node->value = echo
	node->echo_node->value = 'Today is $(date +%A)'

linked list of each token until a null is reached
// size of current_token = length of the total string...


store everything in token_lst


// if < (readirection met) then will have to change 

cat < append | grep sth | wc -w > output.txt

if < (readirection met) then will have to change

	// if output is piped_out then create a pipe
	inside fork()
		// fd = open("append", O_RDONLY);
		// dupe2(fd, STDIN_FILENO);
		// close(fd);
	




Input: `echo "Hello $USER" > file.txt`

1. Tokenization:
   - Tokens: `echo`, `"Hello $USER"`, `>`, `file.txt`
   - Stored as a linked list: `echo → "Hello $USER" → > → file.txt`.

2. Expansion/Processing:
   - `$USER` expands to a username (e.g., `alice`).
   - Quotes are stripped: `Hello alice`.

3. Conversion to Array:
   - Final array: `["echo", "Hello alice", ">", "file.txt"]` (used for redirection and execution).

Reads command
Tokenization
Command Identification
Command Expansion
Quote Removal
Redirections
Command Execution



focus:

ls -l

cat<test.txt|grep second
cat < test.txt | grep second
